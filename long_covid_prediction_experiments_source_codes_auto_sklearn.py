# -*- coding: utf-8 -*-
"""Long COVID Prediction Experiments Source Codes-Auto-sklearn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xonq3QDWx9F4x-TbcdBQnFoYkSCtfImB

# Import libraries
"""

import pandas as pd
from datetime import datetime
import re
import numpy as np
import sklearn
import featuretools as ft

import random
random.seed(10)

from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTEN
from sklearn.metrics import precision_score, recall_score, accuracy_score

#Auto-sklearn
import autosklearn
from autosklearn.classification import AutoSklearnClassifier
from autosklearn.metrics import f1_micro

"""# Import Dataset & Data Preprocessing

### NCIPR data
"""

ncipr_data = pd.read_csv('/home/xjing/Dataset/052321_NCIPR1_dataset.csv', na_values=['nan', ' ', 'NAN', 'NaN', 'na', 'NA'], skiprows=[1])

#drop not complete instances
ncipr_data = ncipr_data[ncipr_data['complete_binary']==1.0]

"""## Preprocessing for Exp1,3"""

#select the related cols
selected_cols = ['age_calculated', 'ncipr_gender', 'ncipr_onset_date', 'ncipr_symptoms_all', 'ncipr_symptoms_med_complicat', 'ncipr_max_temp', 'ncipr_min_osat',
                 'ncipr_symptom_worst', 'ncipr_symptoms_events', 'ncipr_how_severe_self', 'ncipr_onset_symptoms', 'ncipr_employ',
                 'ncipr_treat_home', 'ncipr_treat_hospital', 'ncipr_treat_med_therapy', 'ncipr_treat_prescriptions', 'ncipr_lasting_changes',
                 'ncipr_lasting_cognitive', 'ncipr_return_health_when', 'ncipr_lasting_changes_time', 'ncipr_how_anxious', 'ncipr_how_disrupted', 
                 'ncipr_quarantine_kind_test', 'ten_days_activity_01', 'ncipr_pet', 'ncipr_vaccine_received', 'ncipr_vaccine_received_date', 'ncipr_vaccine_had_side', 
                 'ncipr_vaccine_side_effects', 'ncipr_vaccine2_had_side', 'ncipr_vaccine2_side_effects', 'ncipr_vaccine_relaxed_behavior', 
                 'db_24', 'db_26', 'db_36', 'db_37']
ncipr_data = ncipr_data[selected_cols]

#rename the cols
cols_rename_dict = {'age_calculated':'age', 'ncipr_gender':'gender', 'ncipr_onset_date':'onset_date', 'ncipr_symptoms_all':'symptoms', 
                    'ncipr_symptoms_med_complicat':'symptoms_med_complicat', 'ncipr_max_temp':'max_temp', 'ncipr_min_osat':'min_osat',
                    'ncipr_symptom_worst':'symptom_worst', 'ncipr_symptoms_events':'symptoms_events', 'ncipr_how_severe_self':'severe_self', 
                    'ncipr_onset_symptoms':'onset_symptoms', 'ncipr_employ':'employ_status', 'ncipr_treat_home':'treat_home', 
                    'ncipr_treat_hospital':'treat_hospital', 'ncipr_treat_med_therapy':'treat_med_therapy', 
                    'ncipr_treat_prescriptions':'treat_prescriptions', 'ncipr_lasting_changes':'long_symptoms', 'ncipr_lasting_cognitive':'lasting_cognitive', 
                    'ncipr_return_health_when':'return_health_when', 'ncipr_lasting_changes_time':'lasting_changes_time', 
                    'ncipr_how_anxious':'how_anxious', 'ncipr_how_disrupted':'how_disrupted', 'ncipr_quarantine_kind_test':'quarantine_bhv', 
                    'ten_days_activity_01':'ten_days_activity', 'ncipr_pet':'pet', 'ncipr_vaccine_received':'vaccine_received', 'ncipr_vaccine_received_date':'vaccine_received_date', 
                    'ncipr_vaccine_had_side':'vaccine_had_side', 'ncipr_vaccine_side_effects':'vaccine_side_effects', 'ncipr_vaccine2_had_side':'vaccine2_had_side', 
                    'ncipr_vaccine2_side_effects':'vaccine2_side_effects', 'ncipr_vaccine_relaxed_behavior':'vaccine_relaxed_behavior', 'db_24':'stress_lvl', 
                    'db_26':'energy_lvl', 'db_36':'med_history', 'db_37':'med_treat_history'}
ncipr_data = ncipr_data.rename(cols_rename_dict, axis=1)

#change data type and deal w/ missing data
ncipr_data['age'] = ncipr_data['age'].str.replace('[+]', '')
ncipr_data['age'] = pd.to_numeric(ncipr_data['age'], errors='ignore') #ignore NaN
ncipr_data['age'] = ncipr_data['age'].fillna(ncipr_data['age'].mean())
ncipr_data = ncipr_data.dropna(subset=['long_symptoms']) #drop na based on the 'long_symptoms' col

"""
can see that the output of this col, there several long symptoms with each patient thus any patient w/ 'None of these'
will be categorised as 0(No), else 1(Yes)
"""
ncipr_data.loc[ncipr_data['long_symptoms']!='None of these', 'long_symptoms'] = 1
ncipr_data.loc[ncipr_data['long_symptoms']=='None of these', 'long_symptoms'] = 0
target_ncipr = ncipr_data['long_symptoms'] #sep the target col from dataset
ncipr_data.drop(columns=['long_symptoms'], inplace=True)

"""## Preprocessing for Exp6,8,10,12,14"""

selected_cols = ['age_calculated', 'ncipr_gender', 'ncipr_onset_date', 'ncipr_symptoms_all',
                 'ncipr_symptom_worst', 'ncipr_employ',
                 'ncipr_treat_hospital', 'ncipr_treat_prescriptions', 'ncipr_lasting_changes',
                 'ncipr_lasting_cognitive', 'ncipr_how_anxious', 'ncipr_how_disrupted', 
                 'ncipr_vaccine_received', 
                 'db_24', 'db_26', 'db_36']
ncipr_data = ncipr_data[selected_cols]

cols_rename_dict = {'age_calculated':'age', 'ncipr_gender':'gender', 'ncipr_onset_date':'onset_date', 'ncipr_symptoms_all':'symptoms', 
                    'ncipr_symptom_worst':'symptom_worst', 'ncipr_employ':'employ_status',
                    'ncipr_treat_hospital':'treat_hospital', 'ncipr_treat_prescriptions':'treat_prescriptions', 
                    'ncipr_lasting_changes':'long_symptoms', 'ncipr_lasting_cognitive':'lasting_cognitive', 
                    'ncipr_how_anxious':'how_anxious', 'ncipr_how_disrupted':'how_disrupted', 
                    'ncipr_vaccine_received':'vaccine_received',  
                    'db_24':'stress_lvl', 
                    'db_26':'energy_lvl', 'db_36':'med_history'}
ncipr_data = ncipr_data.rename(cols_rename_dict, axis=1)

#features values mapping
gender_dict = {'Female':'Female', 'Male':'Male', 'Prefer not to answer':np.nan, 
                'Option to self-describe':np.nan, 'Female,Option to self-describe':np.nan, 'Male,Female':np.nan}
ncipr_data['gender'] = ncipr_data['gender'].map(gender_dict)

employ_dict = {'Employed part-time':'Employed', 'Employed full-time':'Employed', 'On leave':'Employed', 'None apply':np.nan}
ncipr_data['employ_status'] = ncipr_data['employ_status'].replace(employ_dict)

lastingcog_dict = {'I prefer not to answer':np.nan}
ncipr_data['lasting_cognitive'] = ncipr_data['lasting_cognitive'].replace(lastingcog_dict)

vaccine_dict = {'Yes (1 or 2 doses)':'Yes'}
ncipr_data['vaccine_received'] = ncipr_data['vaccine_received'].replace(vaccine_dict)

ncipr_data.loc[ncipr_data['med_history']!='None apply', 'med_history'] = 'Yes'
ncipr_data.loc[ncipr_data['med_history']=='None apply', 'med_history'] = 'No'

#drop na based on the 'long_symptoms' col
ncipr_data = ncipr_data.dropna(subset=['long_symptoms'])

"""
can see that the output of this col, there several long symptoms with each patient thus any patient w/ 'None of these'
will be categorised as 0(No), else 1(Yes)
"""
ncipr_data.loc[ncipr_data['long_symptoms']!='None of these', 'long_symptoms'] = 1
ncipr_data.loc[ncipr_data['long_symptoms']=='None of these', 'long_symptoms'] = 0
target_ncipr = ncipr_data['long_symptoms'] #sep the target col from dataset
ncipr_data.drop(columns=['long_symptoms'], inplace=True)

ncipr_data['onset_date'] = pd.to_datetime(ncipr_data['onset_date'], format='%y-%b', errors='coerce')

"""## Kenya and Malawi data

Kenya
"""

kenya_data = pd.read_csv('/home/xjing/Dataset/kenya-long-covid-effects.csv', na_values=['nan', ' ', 'NAN', 'NaN', 'na', 'NA', 'N/A'])

# select some features
kenya_disrupt = kenya_data.loc[:, 'C3.1_1':'C3b.3_8']
selected_cols = ['age', 'gender','Symptoms', 'C6', 'occupation', 'C10', 'C7', 'C4','C4b','C4b_5', 
                 'C3b.1_1','C3b.2_1','C3b.3_1', 'C22', 'communicable_disease','non_communicable_disease',
                 'body_organ_disease','neurological_condition', 'respiratory_condition','other_disease',
                 'C3b.1_7','C3b.2_7', 'C3b.3_7', 'C3.1_1','C3.2_1','C3.3_1']
kenya_data = kenya_data[selected_cols]

#features processing
kenya_data['med_history'] = (kenya_data.loc[:, 'communicable_disease':'other_disease'] == 'Yes').any(axis=1)
kenya_data.loc[kenya_data['med_history']==True, 'med_history'] = 'Yes'
kenya_data.loc[kenya_data['med_history']==False, 'med_history'] = 'No'

kenya_data['long_symptoms']= (kenya_data.loc[:, 'C4':'C4b'] == 'None of the above').all(axis=1)
kenya_data.loc[kenya_data['long_symptoms']==True, 'long_symptoms'] = 1
kenya_data.loc[kenya_data['long_symptoms']==False, 'long_symptoms'] = 0

kenya_data['how_anxious'] = kenya_data.loc[:, ['C3b.1_1','C3b.2_1','C3b.3_1']].mode(axis=1)[0]
kenya_data['stress_lvl'] = kenya_data.loc[:, ['C3b.1_7','C3b.2_7', 'C3b.3_7']].mode(axis=1)[0]
kenya_data['energy_lvl'] = kenya_data.loc[:, ['C3.1_1','C3.2_1','C3.3_1']].mode(axis=1)[0]
kenya_data['how_disrupted'] = kenya_disrupt.mode(axis=1)[0]
kenya_data.loc[kenya_data['C10']=='I did nothing', 'C10'] = 'None of these apply'

#features values mapping
symp_worst_dict = {'Recurrent fever':'Fever', 'Persistent cough':'Cough', 'Chest pain':'Difficulty Breathing/Chest Pressure', 
                   'Shortness of breath':'Difficulty Breathing/Chest Pressure', 'Joint pain':'Muscle Pain/Body Aches',
                   'Muscle pain and needles':'Muscle Pain/Body Aches', 'Loss of smell':'Loss of Taste or Smell',
                   'Loss of taste':'Loss of Taste or Smell', 'Acid reflux':'Other, Specify', 'None of the above':'No symptoms experienced',
                   'Back ache':'Muscle Pain/Body Aches', 'Vomiting':'Nausea/Vomiting', 'Nerve pain/burning':'Seizure or Loss of Consciousness', 'Abdominal pain':'Other, Specify',
                   'Palpitations':'Other, Specify', 'Rash':'Other, Specify', 'Post exertion malaise':'Other, Specify', 'Tinnitus (buzzing in ears)':'Other, Specify'}
kenya_data['C6'] = kenya_data['C6'] .replace(symp_worst_dict)

kenya_data = kenya_data.drop(columns=['C4','C4b','C3b.1_1','C3b.2_1','C3b.3_1', 'C3b.1_7','C3b.2_7', 'C3b.3_7', 'C3.1_1','C3.2_1','C3.3_1','communicable_disease','non_communicable_disease',
                                      'body_organ_disease','neurological_condition','respiratory_condition','other_disease'])

# rename cols
cols_rename_dict = {'Symptoms':'symptoms', 'occupation':'employ_status', 'C4b_5':'lasting_cognitive', 
                    'C6':'symptom_worst', 'C10':'treat_prescriptions', 'C7':'treat_hospital', 'C22':'vaccine_received'}
kenya_data = kenya_data.rename(cols_rename_dict, axis=1)

#features values mapping
disrupt_dict = {'Never':'No disruption', 'Rarely':'Very mild disruption', 'Sometimes':'Mild to moderate disruption', 
                'Always':'Moderate to severe disruption', 'Very often':'Extreme disruption'}
kenya_data['how_disrupted'] = kenya_data['how_disrupted'].map(disrupt_dict)

anxiety_dict = {'Never':'No anxiety', 'Rarely':'Very mild anxiety', 'Sometimes':'Mild to moderate anxiety', 
                'Always':'Severe to Extreme anxiety', 'Very often':'Extreme anxiety'}
kenya_data['how_anxious'] = kenya_data['how_anxious'].map(anxiety_dict)

stress_dict = {'Never':'No change', 'Rarely':'Worsened them moderately', 'Sometimes':'Worsened them moderately', 
                'Always':'Worsened them significantly', 'Very often':'Worsened them significantly'}
kenya_data['stress_lvl'] = kenya_data['stress_lvl'].map(stress_dict)

energy_dict = {'Never':'No change', 'Rarely':'Worsened my energy moderately', 'Sometimes':'Worsened my energy moderately', 
                'Always':'Worsened my energy moderately', 'Very often':'Worsened my energy moderately'}
kenya_data['energy_lvl'] = kenya_data['energy_lvl'].map(energy_dict)

kenya_data['onset_date'] = np.nan

"""###Malawi"""

malawi_data = pd.read_csv('/home/xjing/Dataset/malawi-long-covid.csv', na_values=['nan', ' ', 'NAN', 'NaN', 'na', 'NA', 'N/A'])

# select some features
malawi_disrupt = malawi_data.loc[:, 'C3.1_1':'C3b.3_8']
selected_cols = ['age', 'gender','Symptoms', 'date', 'C6', 'occupation', 'C10', 'C7', 'C4','C4b','C4b_5', 
                 'C3b.1_1','C3b.2_1','C3b.3_1', 'C22', 'communicable_disease','non_communicable_disease',
                 'body_organ_disease','neurological_condition', 'respiratory_condition','other_disease',
                 'C3b.1_7','C3b.2_7', 'C3b.3_7', 'C3.1_1','C3.2_1','C3.3_1']
malawi_data = malawi_data[selected_cols]

#features processing
malawi_data['med_history'] = (malawi_data.loc[:, 'communicable_disease':'other_disease'] == 'Yes').any(axis=1)
malawi_data.loc[malawi_data['med_history']==True, 'med_history'] = 'Yes'
malawi_data.loc[malawi_data['med_history']==False, 'med_history'] = 'No'

malawi_data['long_symptoms']= (malawi_data.loc[:, 'C4':'C4b'] == 'None of the above').all(axis=1)
malawi_data.loc[malawi_data['long_symptoms']==True, 'long_symptoms'] = 1
malawi_data.loc[malawi_data['long_symptoms']==False, 'long_symptoms'] = 0

malawi_data['how_anxious'] = malawi_data.loc[:, ['C3b.1_1','C3b.2_1','C3b.3_1']].mode(axis=1)[0]
malawi_data['stress_lvl'] = malawi_data.loc[:, ['C3b.1_7','C3b.2_7', 'C3b.3_7']].mode(axis=1)[0]
malawi_data['energy_lvl'] = malawi_data.loc[:, ['C3.1_1','C3.2_1','C3.3_1']].mode(axis=1)[0]
malawi_data['how_disrupted'] = malawi_disrupt.mode(axis=1)[0]
malawi_data.loc[malawi_data['C10']=='I did nothing', 'C10'] = 'None of these apply'

#features values mapping
symp_worst_dict = {'Recurrent fever':'Fever', 'Persistent cough':'Cough', 'Chest pain':'Difficulty Breathing/Chest Pressure', 
                   'Shortness of breath':'Difficulty Breathing/Chest Pressure', 'Joint pain':'Muscle Pain/Body Aches',
                   'Muscle pain and needles':'Muscle Pain/Body Aches', 'Loss of smell':'Loss of Taste or Smell',
                   'Loss of taste':'Loss of Taste or Smell', 'Acid reflux':'Other, Specify', 'None of the above':'No symptoms experienced',
                   'Back ache':'Muscle Pain/Body Aches', 'Vomiting':'Nausea/Vomiting', 'Nerve pain/burning':'Seizure or Loss of Consciousness', 'Abdominal pain':'Other, Specify',
                   'Palpitations':'Other, Specify', 'Rash':'Other, Specify', 'Post exertion malaise':'Other, Specify', 'Tinnitus (buzzing in ears)':'Other, Specify'}
malawi_data['C6'] = malawi_data['C6'] .replace(symp_worst_dict)

malawi_data = malawi_data.drop(columns=['C4','C4b','C3b.1_1','C3b.2_1','C3b.3_1', 'C3b.1_7','C3b.2_7', 'C3b.3_7', 'C3.1_1','C3.2_1','C3.3_1','communicable_disease','non_communicable_disease',
                                      'body_organ_disease','neurological_condition','respiratory_condition','other_disease'])

cols_rename_dict = {'Symptoms':'symptoms', 'date':'onset_date', 'occupation':'employ_status', 'C4b_5':'lasting_cognitive', 
                    'C6':'symptom_worst', 'C10':'treat_prescriptions', 'C7':'treat_hospital', 'C22':'vaccine_received'}
malawi_data = malawi_data.rename(cols_rename_dict, axis=1)

#features values mapping
disrupt_dict = {'Never':'No disruption', 'Rarely':'Very mild disruption', 'Sometimes':'Mild to moderate disruption', 
                'Always':'Moderate to severe disruption', 'Very often':'Extreme disruption'}
malawi_data['how_disrupted'] = malawi_data['how_disrupted'].map(disrupt_dict)

anxiety_dict = {'Never':'No anxiety', 'Rarely':'Very mild anxiety', 'Sometimes':'Mild to moderate anxiety', 
                'Always':'Severe to Extreme anxiety', 'Very often':'Extreme anxiety'}
malawi_data['how_anxious'] = malawi_data['how_anxious'].map(anxiety_dict)

stress_dict = {'Never':'No change', 'Rarely':'Worsened them moderately', 'Sometimes':'Worsened them moderately', 
                'Always':'Worsened them significantly', 'Very often':'Worsened them significantly'}
malawi_data['stress_lvl'] = malawi_data['stress_lvl'].map(stress_dict)

energy_dict = {'Never':'No change', 'Rarely':'Worsened my energy moderately', 'Sometimes':'Worsened my energy moderately', 
                'Always':'Worsened my energy moderately', 'Very often':'Worsened my energy moderately'}
malawi_data['energy_lvl'] = malawi_data['energy_lvl'].map(energy_dict)

malawi_data['onset_date'] = pd.to_datetime(malawi_data['onset_date'], format='%Y-%m-%d', errors='coerce')

"""### Combine all data"""

all_data = pd.concat([ncipr_data, kenya_data, malawi_data], ignore_index=True)

#execute only for exp14 (SDG)
synthetic_data = pd.read_csv("/home/xjing/Dataset/sythetic_data.csv", na_values=['nan', ' ', 'NAN', 'NaN', 'na', 'NA', 'N/A'])
synthetic_data.drop(columns=['Unnamed: 0'], inplace=True)
print(synthetic_data.shape)
print(synthetic_data['long_symptoms'].value_counts())
all_data = pd.concat([ncipr_data, synthetic_data, kenya_data, malawi_data], ignore_index=True)

all_target = all_data['long_symptoms'] #sep the target col from dataset
all_data.drop(columns=['long_symptoms'], inplace=True)

all_target.value_counts()

"""#Featuretools"""

es_ncipr = ft.EntitySet("NCIPR_long_COVID")
es_ncipr.entity_from_dataframe(entity_id="ncipr", dataframe=ncipr_data, make_index=True, index="index")
feature_matrix_ncipr, feature_defs_ncipr = ft.dfs(entityset=es_ncipr, target_entity="ncipr", max_depth=1)

ncipr_enc, ncipr_features_enc = ft.encode_features(feature_matrix_ncipr, feature_defs_ncipr)

#run from exp8
es_all = ft.EntitySet("all_long_COVID")
es_all.entity_from_dataframe(entity_id="all", dataframe=all_data, make_index=True, index="index")
feature_matrix_all, feature_defs_all = ft.dfs(entityset=es_all,
                                      target_entity="all",
                                      max_depth=1)

all_enc, all_features_enc = ft.encode_features(feature_matrix_all, feature_defs_all)

"""#Auto-sklearn"""

#exp2,4
def dataSplit(df, target):
  X_train, X_test, y_train, y_test = train_test_split(df, target.astype('int'), train_size=0.60, test_size=0.40, random_state=10)
  return X_train, X_test, y_train, y_test

X_train, X_test, y_train, y_test = dataSplit(ncipr_enc, target_ncipr)

#from exp6,8,10
def dataSplit2(df, target):
  target = target.astype('int')
  X_train, X_test, y_train, y_test = df.iloc[0:1670, :], df.iloc[1670:, :], target[0:1670], target[1670:]
  return X_train, X_test, y_train, y_test

X_train, X_test, y_train, y_test = dataSplit2(all_enc, all_target)

#for exp12 --> Oversampling
def dataSplit3(df, target):
  target = target.astype('int')
  X_train, X_test, y_train, y_test = df.iloc[0:1670, :], df.iloc[1670:, :], target[0:1670], target[1670:]
  oversample = SMOTEN(k_neighbors=4)
  X_test, y_test = oversample.fit_resample(X_test, y_test)
  return X_train, X_test, y_train, y_test

X_train, X_test, y_train, y_test = dataSplit3(all_enc, all_target)

#for exp14 --> SDG
def dataSplit4(df, target):
  target = target.astype('int')
  X_train, X_test, y_train, y_test = df.iloc[0:2170, :], df.iloc[2170:, :], target[0:2170], target[2170:] 
  return X_train, X_test, y_train, y_test

X_train, X_test, y_train, y_test = dataSplit4(all_enc, all_target)

le = preprocessing.LabelEncoder()

selected_cols = ncipr_enc.columns
for col in selected_cols:
  ncipr_enc.loc[ncipr_enc[col]<0, col] = 0

for col in selected_cols:
  if ncipr_enc[col].dtypes == 'object':
    ncipr_enc[col] = le.fit_transform(ncipr_enc[col])

#run from exp8
le = preprocessing.LabelEncoder()

selected_cols = all_enc.columns
for col in selected_cols:
  all_enc.loc[all_enc[col]<0, col] = 0

for col in selected_cols:
  if all_enc[col].dtypes == 'object':
    all_enc[col] = le.fit_transform(all_enc[col])

def as_clf(X_train, y_train, e_size, X_test, y_test):
  clf = AutoSklearnClassifier(time_left_for_this_task=600, ensemble_size = e_size,
                            scoring_functions=[f1_micro], resampling_strategy='cv', resampling_strategy_arguments={'folds': 5}, 
                            metric=autosklearn.metrics.f1_micro)
  clf.fit(X = X_train, y = y_train)
  print(clf.show_models())
  print(clf.sprint_statistics())
  y_pred = clf.predict(X_test)

  # Calculate metrics
  p = precision_score(y_test, y_pred, average='weighted', zero_division=0)
  r = recall_score(y_test, y_pred, average='weighted', zero_division=0)
  a = accuracy_score(y_test, y_pred)

  print(f'Precision: {p:.2%}')
  print(f'Recall: {r:.2%}')
  print(f'Accuracy: {a:.2%}')
  print()
  print()

#exp2,6,8,12
as_clf(X_train_ncipr, y_train_ncipr, 3, X_test_ncipr, y_test_ncipr)

#exp4,10
en_size = [5, 7, 10]
for e in en_size:
  as_clf(X_train_ncipr, y_train_ncipr, e, X_test_ncipr, y_test_ncipr)